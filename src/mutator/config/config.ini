[database]
# WAL (default), or NO_WAL
database_mode=WAL
# If database_url changes, it must change in alembic/env.py, and src/manager/config/config.ini as well
# The easiest is to set an environment variable that overrides it. See the Docs section 'using-a-different-database'.
database_url=sqlite:///data/database/mutator.db
echo=False
timeout=15

[worker_loop]
worker_loop_interval_seconds=1
max_test_run_attempts=3

[worker_queue]
# worker_queue_blocking_size should ideally be bigger than consumer count
# size will influence memory usage
worker_queue_blocking_size=100
# worker_queue_blocking_seconds should be more than throttle interval_seconds
worker_queue_blocking_seconds=20
worker_queue_batch_write_size=100
worker_queue_batch_read_size=100

[consumer]
# If you make this too high with too many concurrent workers you might hit sqlite database is locked errors
# Change to something else like Postgres or Mysql
count=5
request_timeout=600

[throttle]
throttle_test_run=False
# throttle_interval_seconds should be less than [worker_queue] worker_queue_blocking_seconds
# otherwise workers/consumers might time out before new tests are loaded into in-memory queue
# and stop the test run
throttle_interval_seconds=1
throttle_tests_per_interval=10
throttle_timeout=10
# throttle_timeout_retry_sleep_interval_seconds x throttle_timeout_max_retries = maximum time
# that requests will have before populator times out and ends test run.
throttle_timeout_retry_sleep_interval_seconds=10
throttle_timeout_max_retries=18

[background_jobs]
cancellation_listener_interval_seconds=10
# lock_interval must be longer than refresh_interval
# How long the lock is held
lock_interval_seconds=180
# How often the lock is refreshed
refresh_interval_seconds=60
